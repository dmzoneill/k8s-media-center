---
- name: Gather inventory hostname and IP mappings
  hosts: all
  vars_files:
    - facts/infra.yaml
  tasks:
    - name: Set facts for hosts entries
      set_fact:
        hosts_entries: |
          {% for host in groups['vms'] %}
          {{ hostvars[host]['ansible_host'] }} {{ host }}
          {% endfor %}

- name: Set up /etc/hosts
  hosts: vms, local
  vars_files:
    - facts/infra.yaml
  tasks:

    - name: Remove existing entries for hosts from /etc/hosts
      become: yes
      lineinfile:
        path: /etc/hosts
        state: absent
        regexp: ".*{{ item.name }}.*"
      with_items: "{{ vms }}"

    - name: Append new hosts entries to /etc/hosts
      become: yes
      lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
        state: present
      with_items: "{{ hosts_entries.split('\n') }}"
      when: item.strip() != ""

- name: Set up Kubernetes VMs
  hosts: vms
  vars_files:
    - facts/infra.yaml
  tasks:

    - name: Remove IPv6 entries
      lineinfile:
        path: /etc/hosts
        state: absent
        regexp: '^::.*'

    - name: Append hosts entries to /etc/hosts from inventory
      become: yes
      lineinfile:
        path: /etc/hosts
        create: yes
        line: "{{ item }}"
        state: present
      with_items: "{{ hosts_entries.split('\n') }}"
      when: item.strip() != ""

    - name: Set DNF proxy
      lineinfile:
        path: /etc/dnf/dnf.conf
        line: "proxy={{ PROXY }}"
        create: yes

    - name: Create the Kubernetes repository file
      copy:
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
        dest: /etc/yum.repos.d/kubernetes.repo
        owner: root
        group: root
        mode: '0644'

    - name: Update package repositories
      dnf:
        name: '*'
        state: latest
        update_cache: yes

    - name: Upgrade all packages
      dnf:
        name: '*'
        state: latest

    - name: Remove swap config
      dnf:
        name: "{{ item }}"
        state: absent
      with_items:
        - zram-generator*

    - name: Install Container, kubernetes and network tools
      dnf:
        name: "{{ item }}"
        state: present
        disable_excludes: "kubernetes"
      with_items:
        - container*
        - kubelet
        - kubeadm
        - kubectl
        - iproute*
        - net-tools
        - iputils*
        - tracer*
        - iptables*
        - nftables*
        - virtiofsd
        - kubernetes-cni
        - vim
        - nfs-utils
        - wireguard*

    - name: Enable br_netfilter for containerd
      copy:
        dest: "/etc/modules-load.d/containerd.conf"
        content: |
          br_netfilter

    - name: Enable ip forwarding
      copy:
        dest: "/etc/sysctl.d/kubernetes.conf"
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.ipv6.conf.all.disable_ipv6 = 1
          net.ipv6.conf.all.forwarding = 0
          net.ipv4.conf.all.rp_filter = 1
          net.ipv4.tcp_keepalive_time = 300
          net.ipv4.tcp_keepalive_intvl = 60
          net.ipv4.tcp_keepalive_probes = 10
          net.core.somaxconn = 65535
          fs.file-max = 1000000
          net.ipv4.tcp_syncookies = 1
          net.ipv4.tcp_mtu_probing = 1

    - name: Enable kubelet service
      service:
        name: kubelet
        enabled: yes

    - name: Enable kubelet containerd
      service:
        name: containerd
        enabled: yes

    - name: Set hostname to inventory name
      hostname:
        name: "{{ inventory_hostname }}"

    - name: Disable SELinux in the configuration file
      replace:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        replace: 'SELINUX=disabled'

    - name: Disable SELinux for the current session
      command: setenforce 0
      when: ansible_selinux.status == "enabled"

    - name: Disable swap immediately
      command: swapoff -a

    - name: Remove swap entry from /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^\s*([^#\s]+)\s+none\s+swap\s+sw\s+0\s+0\s*$'
        replace: '# \1 none swap sw 0 0'

    - name: Disable firewalld
      become: yes
      systemd:
        name: firewalld
        state: stopped
        enabled: no

    - name: Ensure mount directory exists
      file:
        path: /data
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Add fstab entry for 9p filesystem
      mount:
        path: /data
        src: hostshare
        fstype: 9p
        opts: trans=virtio,version=9p2000.L
        state: present

    - name: Mount the 9p filesystem
      command: mount -a
      args:

    # - name: Copy wireguard config to {{ inventory_hostname }}
    #   copy:
    #     src: config/{{ inventory_hostname }}.conf
    #     dest: /etc/wireguard/wg0.conf
    #     mode: '0600'

    # - name: Enable wireguard on boot
    #   service:
    #     name: wg-quick@wg0
    #     enabled: yes

    # - name: Ensure /etc/resolv.conf has the correct DNS configuration
    #   ansible.builtin.copy:
    #     dest: /etc/resolv.conf
    #     content: |
    #       nameserver 8.8.8.8
    #       nameserver 8.8.4.4
    #       nameserver 127.0.0.53
    #       options edns0 trust-ad
    #       search .

    - name: Reboot the machine
      reboot:
        msg: "Rebooting after initial setup"
        pre_reboot_delay: 0
        post_reboot_delay: 30
        reboot_timeout: 600

    - name: Wait for the machine to come back online
      wait_for_connection:
        timeout: 300